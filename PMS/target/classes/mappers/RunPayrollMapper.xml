<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="org.pms.feature.runpayroll.mapper.RunPayrollMapper">

	<!-- 공통: 월 마지막 날 (퇴직여부 계산용) -->
	<sql id="month_last_day">
		/* to_date(:yyyymm||'-01','YYYY-MM-DD') 의 월말 */
		LAST_DAY(TO_DATE(#{yyyymm}||'-01','YYYY-MM-DD'))
	</sql>

	<!-- ========================= 1) Summary ========================= -->
	<select id="selectPayrollSummary"
		resultType="org.pms.feature.runpayroll.domain.PayrollSummaryRow">
		/* 사원별 급여 요약 */
		WITH
		PS AS (
		SELECT p.emp_id,
		SUM(CASE WHEN i.is_previous = 'N' THEN i.amount ELSE 0 END) AS pay_tot_amt,
		SUM(CASE WHEN i.is_previous = 'Y' THEN i.amount ELSE 0 END) AS
		prev_pay_tot_amt,
		(SELECT NVL(SUM(d.amount),0) FROM payslip_deduction d WHERE d.payslip_id =
		p.payslip_id) AS ded_tot_amt,
		p.net_pay_amt
		FROM payslip p
		LEFT JOIN payslip_item i ON i.payslip_id = p.payslip_id
		WHERE p.apply_yyyymm = #{yyyymm}
		<if test="payType != null and payType != ''">
			AND p.pay_type = #{payType}
		</if>
		GROUP BY p.emp_id, p.net_pay_amt, p.payslip_id
		),
		-- 직원별 최신(created_at DESC) 1건
		YH AS (
		SELECT emp_id, tax_apply_type
		FROM (
		SELECT y.emp_id,
		y.tax_apply_type,
		ROW_NUMBER() OVER (PARTITION BY y.emp_id ORDER BY y.created_at DESC) AS rn
		FROM yrt_header y
		WHERE y.base_year = TO_NUMBER(SUBSTR(#{yyyymm},1,4))
		) y1          <!-- ★ 별칭 추가 -->
		WHERE rn = 1
		)
		SELECT
		e.emp_no AS empNo,
		e.emp_name AS empName,
		d.dept_name AS deptName,
		yh.tax_apply_type AS taxApplyType,
		etp.tax_adjust_rate AS taxAdjustRate,
		etp.project_name AS projectName,
		NVL(etp.tax_calc_exempt_yn,'N') AS taxCalcExemptYn,
		NVL(etp.prorate_yn,'N') AS prorateYn,
		NVL(etp.settlement_reflect_yn,'N') AS settlementReflectYn,
		NVL(etp.manuf_tax_exempt_yn,'N') AS manufTaxExemptYn,
		NVL(etp.overseas_tax_exempt_yn,'N') AS overseasTaxExemptYn,
		NVL(etp.researcher_tax_exempt_yn,'N') AS researcherTaxExemptYn,
		etp.income_tax_reduction_rate AS incomeTaxReductionRate,
		etp.personal_tax_apply_type AS personalTaxApplyType,
		etp.bonus_rate AS bonusRate,
		NVL(ps.pay_tot_amt,0) AS payTotAmt,
		NVL(ps.prev_pay_tot_amt,0) AS prevPayTotAmt,
		NVL(ps.ded_tot_amt,0) AS dedTotAmt,
		NVL(ps.net_pay_amt,0) AS netPayAmt,
		CASE
		WHEN e.retire_date IS NOT NULL
		AND e.retire_date &lt;= LAST_DAY(TO_DATE(#{yyyymm}||'-01','YYYY-MM-DD'))
		THEN 'Y' ELSE 'N'
		END AS retireYn
		FROM emp e
		JOIN dept d ON d.dept_id = e.dept_id
		LEFT JOIN PS ps ON ps.emp_id = e.emp_id
		LEFT JOIN emp_tax_profile etp ON etp.emp_id = e.emp_id
		LEFT JOIN YH yh ON yh.emp_id = e.emp_id
		WHERE 1=1
		<if test="deptCode != null and deptCode != ''">
			AND d.dept_code = #{deptCode}
		</if>
		<if test="empNo != null and empNo != ''">
			AND e.emp_no = #{empNo}
		</if>
		ORDER BY e.emp_no
	</select>

	<!-- ========================= 2) Items (지급항목) ========================= -->
	<select id="selectEarningItems"
		resultType="org.pms.feature.runpayroll.domain.EarningItemRow">
		WITH target_ps AS (
		SELECT p.payslip_id
		FROM payslip p
		JOIN emp e ON
		e.emp_id = p.emp_id
		WHERE e.emp_no = #{empNo}
		AND p.apply_yyyymm =
		#{yyyymm}
		<if test="payType != null and payType != ''">
			AND p.pay_type = #{payType}
		</if>
		)
		SELECT itemName, nonTaxType, previousYn, amount
		FROM (
		SELECT
		i.item_name AS itemName,
		CAST(NULL AS VARCHAR2(30)) AS nonTaxType,
		NVL(i.is_previous,'N') AS previousYn,
		i.amount AS amount,
		0 AS ord,
		i.item_name AS sortKey
		FROM payslip_item i
		WHERE i.payslip_id IN (SELECT
		payslip_id FROM target_ps)

		UNION ALL

		SELECT
		'TOTAL' AS itemName,
		NULL AS
		nonTaxType,
		NULL AS previousYn,
		NVL(SUM(i.amount),0) AS amount,
		1 AS ord,
		'TOTAL' AS sortKey
		FROM payslip_item i
		WHERE i.payslip_id IN (SELECT
		payslip_id FROM target_ps)
		)
		ORDER BY ord, sortKey
	</select>


	<!-- ========================= 3) Deductions (공제항목) ========================= -->
	<select id="selectDeductions"
		resultType="org.pms.feature.runpayroll.domain.DeductionRow">
		WITH target_ps AS (
		SELECT p.payslip_id
		FROM payslip p
		JOIN emp e ON
		e.emp_id = p.emp_id
		WHERE e.emp_no = #{empNo}
		AND p.apply_yyyymm =
		#{yyyymm}
		<if test="payType != null and payType != ''">
			AND p.pay_type = #{payType}
		</if>
		)
		SELECT deductionName, amount
		FROM (
		SELECT d.deduction_name AS
		deductionName,
		d.amount AS amount,
		0 AS ord,
		d.deduction_name AS sortKey
		FROM payslip_deduction d
		WHERE d.payslip_id IN (SELECT payslip_id FROM
		target_ps)

		UNION ALL

		SELECT 'TOTAL' AS deductionName,
		NVL(SUM(d.amount),0) AS amount,
		1 AS ord,
		'TOTAL' AS sortKey
		FROM
		payslip_deduction d
		WHERE d.payslip_id IN (SELECT payslip_id FROM
		target_ps)
		)
		ORDER BY ord, sortKey
	</select>

	<!-- ========================= 4) Utilities ========================= -->
	<select id="findEmpIdByEmpNo" parameterType="string"
		resultType="long">
		SELECT emp_id FROM emp WHERE emp_no = #{empNo}
	</select>

	<!-- payslip 존재 보장 (없으면 insert, 있으면 0행) -->
	<insert id="ensurePayslipExists">
		MERGE INTO payslip p
		USING (
		SELECT #{empId} AS emp_id,
		#{yyyymm} AS apply_yyyymm,
		#{payType} AS pay_type
		FROM dual
		) s
		ON
		(p.emp_id = s.emp_id AND p.apply_yyyymm = s.apply_yyyymm AND
		p.pay_type = s.pay_type)
		WHEN NOT MATCHED THEN
		INSERT (payslip_id,
		emp_id, pay_type, apply_yyyymm, net_pay_amt)
		VALUES (seq_pslp.NEXTVAL,
		s.emp_id, s.pay_type, s.apply_yyyymm, 0)
	</insert>

	<!-- ======= 업무 훅(placeholder) ======= 실제 전표/세금/정산 반영 로직이 생기면 이 자리에서 프로시저 
		호출 또는 상세 SQL로 교체하세요. -->
	<update id="dummyProcessPayroll">
		/* TODO: 급상여처리 로직 연결 */
		<!-- 현재는 영향행수 0 반환 -->
		SELECT 0 FROM dual
	</update>

	<update id="dummyRecalcTaxes">
		/* TODO: 세금 재계산 로직 연결 */
		SELECT 0 FROM dual
	</update>

	<update id="dummyApplyYrt">
		/* TODO: 정산세금 반영 로직 연결 (분할반영 splitMonths 등) */
		SELECT
		0 FROM dual
	</update>

	<update id="dummyConfirm">
		/* TODO: 확정/해제 로직 연결 (확정 상태 저장 테이블 필요) */
		SELECT 0
		FROM dual
	</update>

</mapper>
